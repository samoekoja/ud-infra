# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
commands:
  destroy_environment:
    steps: 
      - run:
          name: Destroy 
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}

jobs:
  # create-infrastructure:
  #   docker:
  #     - image: amazon/aws-cli

  #   steps:
  #     - checkout
  #     - run:
  #         name: Create Cloudformation Stack
  #         command: |
  #           aws cloudformation deploy \
  #           --template-file template.yml \
  #           --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} \
  #           --region us-east-1
  
  # configure_infrastructure:
  #   docker:
  #     - image: python:3.7-alpine3.11

  #   steps:
  #     - checkout
  #     - add_ssh_keys:
  #             fingerprints: ["36:b0:32:dc:9e:13:e1:d1:97:e3:81:f7:01:b3:e3:d5"]

  #     - run:
  #         name: install ansible
  #         command: apk add --update ansible

  #     - run:
  #         name: Run Playboook
  #         command: ansible-playbook -i inventory main-remote.yml

  
  # smoke_test:
  #   docker:
  #     - image: amazon/aws-cli

  #   steps:
  #     - run:
  #         name: Test job
  #         # Fail the job intentionally to simulate an error.
  #         command:  return 1
  #     - destroy_environment 
        
  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    
    steps:
      - checkout
      - run:
          name: Execute bucket.yml - Create Cloudformation Stack
          command: |
            aws cloudformation deploy \
            --template-file bucket.yml \
            --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
      # Uncomment the step below if yoou wish to upload all contents of the current directory to the S3 bucket
      - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete

  # Fetch and save the pipeline ID (bucket ID) responsible for the last release.
  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfile.txt                                                            

  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"

  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket and CloudFormation stack. 
          # Use $OldBucketID environment variable or mybucket644752792305 below.
          # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  ek.workflow:
    jobs:
      - create_and_deploy_front_end
      - promote_to_production:
          requires: 
            - [create_and_deploy_front_end]
      - get_last_deployment_id
      - clean_up_old_front_end:
          requires:
            - [get_last_deployment_id]
            - [promote_to_production]
